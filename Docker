1.What is docker?
Docker is the tools that used to isolate resources to create a container that allows applications to be packaged with all the dependencies installed and run wherever we wanted.

2. Virtualisation vs Containeration?
                                  Virtualization	                                             Containerization
 - Virtualization at hardware level                             	           - Virtualization at OS level
 - Heavyweight – VM carry complete operating system                          - Lightweight – Shares same host OS kernel 
 - VM uses hypervisor	                                                       - Containerisation tool is used ex: docker
 - limited performance - Boot up time is more which is in minutes            - Native performance - usually boot in seconds 
 - Consumes dedicated resources means resources allocated to one VM can’t    - Shares OS resources means only uses required amount of resources 
   be used by another VM
 - Supports all OS	                                                         - Supports on Linux

List images  
          - docker images  (OR) docker image ls

Delete images  
          - docker rmi <image_name>:<tag> (OR) docker rmi <image_id>

Delete multiple images  
          - docker rmi <image_name1>:<tag> <image_name2>:<tag>  

Download an image
          - docker pull <image_id>

3.Docker custom image / Dockerfile / Docker instructions 
   - Dockerfile is used to create custom images by using any stock image or other image as a base image.
   - In Dockerfile we can write some set of instructions to update any image.

4.Dockerfile?
  -  A Dockerfile is a text file that contains instructions on how to build a Docker image. It is a text-based file that contains a series of 
     commands that are used to create a Docker image.  
     FROM ubuntu
                FROM is the first instruction in every Dockerfile
                FROM is used to specify the base image on top which all the other 
                    instruction will run in the same Dockerfile.
                FROM <image_name>:<tag>
     RUN 
                Normal shell commands or the commands supported by the base image are executed using this instruction.
                we can have n number of RUN in a single Dockerfile.
                
                Normal command format 
                    RUN <command>

     COPY and ADD 
                Both copy and add instruction is used to copy files and directories from 
                host machine build location to the image and the container created from it.
            
                ADD supports extra source formats 
                  - If the source is a compressed file then ADD will automatically uncompress it in the destination.
                  - If the source is a downloadable link then ADD will automatically download the file in the destination.

                COPY <source_path_from_build_context> <destination_inside_image>      
                ADD <source_path_from_build_context> <destination_inside_image>     

     ENV 
               This instruction is used to set the environment variable inside the container. 
               Using this instruction we can create env variables at build time which means in the docker images.
                ex:        
                           1. For individual variable     
                              ENV <variable_name> <value>
                                 (OR)
                              ENV <variable_name>=<value>
                
                           2. For multiple variables
                               ENV <variable_name1>=<value1> <variable_name2>=<value2> .....
        
              To create environment variables at run time (means in containers)
                1. With the docker run command 
                    docker run -e <variable_name>=<value> -e <variable_name>=<value>
                2. With a list of variables in a file (.env file)
                    docker run --env-file <file_path> ...        

     ARG 
             using this instruction we can pass parameters to Dockerfile as user inputs.
              
              ex: ARG <arg_variable_name>=<value>
      
              Note: <value> acts as default value to the arg_variable means if user does not set 
                    the arg value at build time this value will be used.
      
              To pass the value at build time 
                  docker build --build-arg <arg_variable_name>=<user_value>

     CMD vs ENTRYPOINT 
            - Both CMD and ENTRYPOINT are used to define the default execution command of the container (the command 
                 which will be executed in the container as main process).
            - If we use multiple CMD or ENTRYPOINT in the same Dockerfile only the last one will 
              be considered.
            - If we use both CMD and ENTRYPOINT in the same Dockerfile, then ENTRYPOINT gets the 
                  highest priority and the command defined using CMD will be as parameters to ENTRYPOINT.
    
            Difference 
               - CMD can be completely overridden at the runtime (with docker run at the end we can provide 
                    the command to override the CMD). 
               - ENTRYPOINT can't be overridden at the runtime but the command passed at the runtime 
                 will become parameters to ENTRYPOINT command defined in Dockerfile.
            
            Syntax: we can define command in 2 ways 
                1. shell format 
                      CMD "ls -lrt"
            
                2. EXEC format 
                   - Always the first element is a command.
                   - Except the first element all the other elements are parameters to command.
    
                      CMD ["ls","-lrt"]  

     WORKDIR 
              This is used to set the working directory for all the instructions that follow it.
              such as RUN, CMD, ENTRYPOINT, COPY, ADD ....     
                 
              ex: WORKDIR <path_in_container>

5.Docker image?
    - A Docker image is a read-only template that contains a set of instructions for creating a container that can run on the Docker platform.
    - A Docker Image is a set of layers where each layer represents an instruction from the Dockerfile. The number of image layers is always  
      equal to the number of instructions used in the Dockerfile 
    - Docker creates a container as a temporary R/W (Read-Write) layer on top of image R/O layers. If the container is deleted, all the data on 
      the temporary layer will also be deleted.

Layer:
    The layer is a directory that contains a bunch of files that hold differences from the previous layer. Each one is separated, immutable, and 
    read-only.


