1.What is docker?
Docker is the tools that used to isolate resources to create a container that allows applications to be packaged with all the dependencies 
installed and run wherever we wanted.

2. Virtualisation vs Containeration?
                                  Virtualization	                                             Containerization 
 - Virtualization at hardware level                             	           - Virtualization at OS level
 - Heavyweight – VM carry complete operating system                          - Lightweight – Shares same host OS kernel 
 - VM uses hypervisor	                                                       - Containerisation tool is used ex: docker
 - limited performance - Boot up time is more which is in minutes            - Native performance - usually boot in seconds 
 - Consumes dedicated resources means resources allocated to one VM can’t    - Shares OS resources means only uses required amount of resources 
   be used by another VM
 - Supports all OS	                                                         - Supports on Linux

List images  
          - docker images  (OR) docker image ls

Delete images  
          - docker rmi <image_name>:<tag> (OR) docker rmi <image_id>

Delete multiple images  
          - docker rmi <image_name1>:<tag> <image_name2>:<tag>  

Download an image
          - docker pull <image_id>

3.Docker image?
    - A Docker image is a read-only template that contains a set of instructions for creating a container that can run on the Docker platform.
    - A Docker Image is a set of layers where each layer represents an instruction from the Dockerfile. The number of image layers is always  
      equal to the number of instructions used in the Dockerfile 
    - Docker creates a container as a temporary R/W (Read-Write) layer on top of image R/O layers. If the container is deleted, all the data on 
      the temporary layer will also be deleted.

    Layer:
          The layer is a directory that contains a bunch of files that hold differences from the previous layer. Each one is separated, 
          immutable, and read-only.

4.Docker custom image / Dockerfile / Docker instructions 
   - Dockerfile is used to create custom images by using any stock image or other image as a base image.
   - In Dockerfile we can write some set of instructions to update any image.

5.Dockerfile?
  -  A Dockerfile is a text file that contains instructions on how to build a Docker image. It is a text-based file that contains a series of 
     commands that are used to create a Docker image.  
     FROM ubuntu
                FROM is the first instruction in every Dockerfile
                FROM is used to specify the base image on top which all the other 
                    instruction will run in the same Dockerfile.
                FROM <image_name>:<tag>
     RUN 
                Normal shell commands or the commands supported by the base image are executed using this instruction.
                we can have n number of RUN in a single Dockerfile.
                
                Normal command format 
                    RUN <command>

     COPY and ADD 
                Both copy and add instruction is used to copy files and directories from 
                host machine build location to the image and the container created from it.
            
                ADD supports extra source formats 
                  - If the source is a compressed file then ADD will automatically uncompress it in the destination.
                  - If the source is a downloadable link then ADD will automatically download the file in the destination.

                COPY <source_path_from_build_context> <destination_inside_image>      
                ADD <source_path_from_build_context> <destination_inside_image>     

     ENV 
               This instruction is used to set the environment variable inside the container. 
               Using this instruction we can create env variables at build time which means in the docker images.
                ex:        
                           1. For individual variable     
                              ENV <variable_name> <value>
                                 (OR)
                              ENV <variable_name>=<value>
                
                           2. For multiple variables
                               ENV <variable_name1>=<value1> <variable_name2>=<value2> .....
        
              To create environment variables at run time (means in containers)
                1. With the docker run command 
                    docker run -e <variable_name>=<value> -e <variable_name>=<value>
                2. With a list of variables in a file (.env file)
                    docker run --env-file <file_path> ...        

     ARG 
             using this instruction we can pass parameters to Dockerfile as user inputs.
              
              ex: ARG <arg_variable_name>=<value>
      
              Note: <value> acts as default value to the arg_variable means if user does not set 
                    the arg value at build time this value will be used.
      
              To pass the value at build time 
                  docker build --build-arg <arg_variable_name>=<user_value>

     CMD vs ENTRYPOINT 
            - Both CMD and ENTRYPOINT are used to define the default execution command of the container (the command 
                 which will be executed in the container as main process).
            - If we use multiple CMD or ENTRYPOINT in the same Dockerfile only the last one will 
              be considered.
            - If we use both CMD and ENTRYPOINT in the same Dockerfile, then ENTRYPOINT gets the 
                  highest priority and the command defined using CMD will be as parameters to ENTRYPOINT.
    
            Difference 
               - CMD can be completely overridden at the runtime (with docker run at the end we can provide 
                    the command to override the CMD). 
               - ENTRYPOINT can't be overridden at the runtime but the command passed at the runtime 
                 will become parameters to ENTRYPOINT command defined in Dockerfile.
            
            Syntax: we can define command in 2 ways 
                1. shell format 
                      CMD "ls -lrt"
            
                2. EXEC format 
                   - Always the first element is a command.
                   - Except the first element all the other elements are parameters to command.
    
                      CMD ["ls","-lrt"]  

     WORKDIR 
              This is used to set the working directory for all the instructions that follow it.
              such as RUN, CMD, ENTRYPOINT, COPY, ADD ....     
                 
              ex: WORKDIR <path_in_container>

6. Docker volume?

Bind mount 
      we mount a host location (file/directory) inside a container location    
                                             docker -v <host_path>:<container_path>
      The changes made in the host will retain in a container and also changes made inside the container in this location will retain in the host 
      If the container is deleted host directory will not be deleted (data persistence).
      It is not preferable to mount a single directory to multiple containers. (multiple containers processes may try to write the data to the same file which is not possible)

Volumes 

      They are docker-managed filesystems and we use docker commands to manage these volumes.
      Volumes are easier to manage, backup, and migrate than bind mounts.
      We can use different source filesystems called storage drivers (EBS, EFS, s3) 
      The default location of docker volume is /var/lib/docker/volumes/<volume_name>

EFS Mount


7. Docker Networking
    Publish 
          Publish will bind the container application port to the host machine port so that 
          we can access from the outside world with the host machine port.
      
          Publish = port mapping of container to host machine + Expose 
          
          To publish a port         
              docker run -p <host_port>:<container_port>

  Docker network types 
    1.Bridge 
        - This is a private internal network created by docker on the host machine by name docker0    
        - This is the default network type for all the containers which are created without any network configurations.
        - By default, all the containers in the same bridge can communicate with each other without any extra configuration.    
        - We cannot use container name for communication only IP address is allowed in default bridge.

    2.Custom bridge 
        - In custom bridge containers can communicate with each other with container 
          name and also with the IP address.
                  To create a bridge network 
                            docker network create --driver bridge my_bride 
    3.Host           
        - This driver removes the network isolation between the docker and the host.
        - The containers are directly connected to the host machine network without the extra layer of any docker network.
        - Shares the same TCP.IP stack and the same namespace as the host machine.  
        - All the network interfaces which are there in the host machine are accessible by this container.   

   4.None 
        - Containers are not attached to any network by docker.
        - All the required network configurations need to be done manually.
        - The host or any other containers won't be able to communicate with this container until a custom network is configured.

   5.Overlay 
        - Overlay networks are meant to define network communication of containers hosted on different host machines. 
        - To create such a network we use the ‘overlay’ driver. 
        - The overlay driver is a native driver by docker that helps to create a single layer2 broadcast domain across containers 
          hosted on multiple Docker host machines. 

8. States of container / Lifecycle of container

    1. Created - if a container is newly created and the container is not yet started.
    2. Running - A currently running container. It means there is no problem with the container to run the process.
    3. Exited - A container ran and completed execution with failure.
    4. paused - A container whose process has been paused. (we can unpause the container)
    5. Dead - if the docker daemon tried and failed to stop a container (host ram full)
    6. Restarting - the container will be in the phase of restarting the main process.

9.Docker Architecture

    Docker Daemon 
        - A background process that manages docker images, containers, network, and volumes.
        - This Daemon constantly listens for docker API requests and processes them.
    
    Docker REST API 
        - API which is used by applications to interact with the docker daemon. 
        
    Docker CLI 
        - It is a command line interface for interacting with the docker daemon through REST API.
    
    Docker Objects 
        - Images, Containers, Networks, Volumes

10. Namespaces and cgroups
    - Docker uses Linux namespaces to provide isolated workspace for processes called container
    - when a container is created, docker creates a set of namespaces for it and provides a layer of isolation for the container.
    - Each container run in a different namespace 
    
    namespaces (To list - lsns)

        pid - namespace for managing processes (process isolation)
        user - namespace for non-root user on linux.
        uts - namespace for unix timesharing system which isolates kernel and version identifiers,
              time bonding of process.
        ipc - (interprocess communication) namespace for managing the process communication.      
        mnt - namespace for managing filesystem mounts.
        net - namespace for managing network interfaces.

cgroups (To list - lscgroup)
            - Linux OS uses cgroups to manage the available hardware resources such as CPU, RAM, Disk, I/O.
            - we can control the access and also we can apply the limitations 
            - Linux location to cgroups config file (/sys/fs/cgroup)

11. what is dangling image?

    Dangling images are untagged Docker images that aren't used by a container 

12. docker prune

    The docker prune command is used to remove unused Docker images, containers, and networks.
